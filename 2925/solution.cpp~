#include <vector>
#include <iostream>

class Solution {
public:
    std::vector<std::vector<int>> adj;
    long long solve(int node,int parent,std::vector<int>& values){
        if(adj[node].size()==1 && node!=0)
            return values[node];
        long long sum = 0;
        for(auto it : adj[node]){
            if(it==parent)
                continue;
            sum += solve(it,node,values);
        }
        return min(sum,1LL*values[node]);
    }
    long long maximumScoreAfterOperations(std::vector<std::vector<int>>& edges, std::vector<int>& values) {
        int n = values.size();
        adj.resize(n);
        for(auto it : edges){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        long long ans = 0;
        for(int i=0;i<n;i++)
            ans += values[i];
        long long x = solve(0,-1,values);
        
        return ans-x;
    }
};

int main() {
    std::vector<std::vector<int>> edges = {{0,1},{0,2},{0,3},{2,4},{4,5}};
    std::vector<int> values = {5,2,5,2,1,1};
    
    Solution s;
    std::cout << s.maximumScoreAfterOperations(edges, values) << std::endl;
}